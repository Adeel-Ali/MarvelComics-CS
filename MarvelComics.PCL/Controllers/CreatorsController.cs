/*
 * MarvelComics.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/12/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MarvelComics.PCL;
using MarvelComics.PCL.Http.Request;
using MarvelComics.PCL.Http.Response;
using MarvelComics.PCL.Http.Client;
using MarvelComics.PCL.Exceptions;
using MarvelComics.PCL.Models;

namespace MarvelComics.PCL.Controllers
{
    public partial class CreatorsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static CreatorsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static CreatorsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new CreatorsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Fetches a single creator by id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <return>Returns the Creator response from the API call</return>
        public Creator GetCreatorIndividual(string creatorId)
        {
            Task<Creator> t = GetCreatorIndividualAsync(creatorId);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Fetches a single creator by id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <return>Returns the Creator response from the API call</return>
        public async Task<Creator> GetCreatorIndividualAsync(string creatorId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/creators/{creatorId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "creatorId", creatorId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "apikey", Configuration.Apikey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("referer", Configuration.Referer);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Creator not found.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Creator>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Fetches lists of comics filtered by a creator id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <param name="characters">Optional parameter: Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="collaborators">Optional parameter: Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="dateDescriptor">Optional parameter: Return comics within a predefined date range.</param>
        /// <param name="dateRange">Optional parameter: Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="diamondCode">Optional parameter: Filter by diamond code.</param>
        /// <param name="digitalId">Optional parameter: Filter by digital comic id.</param>
        /// <param name="ean">Optional parameter: Filter by EAN.</param>
        /// <param name="events">Optional parameter: Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="format">Optional parameter: Filter by the issue format (e.g. comic, digital comic, hardcover). (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")</param>
        /// <param name="formatType">Optional parameter: Filter by the issue format type (comic or collection).</param>
        /// <param name="hasDigitalIssue">Optional parameter: Include only results which are available digitally. (Acceptable values are: "true")</param>
        /// <param name="isbn">Optional parameter: Filter by ISBN.</param>
        /// <param name="issn">Optional parameter: Filter by ISSN.</param>
        /// <param name="issueNumber">Optional parameter: Return only issues in series whose issue number matches the input.</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="modifiedSince">Optional parameter: Return only comics which have been modified since the specified date.</param>
        /// <param name="noVariants">Optional parameter: Exclude variant comics from the result set. (Acceptable values are: "true")</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "focDate", "onsaleDate", "title", "issueNumber", "modified", "-focDate", "-onsaleDate", "-title", "-issueNumber", "-modified")</param>
        /// <param name="series">Optional parameter: Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Optional parameter: Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="startYear">Optional parameter: Return only issues in series whose start year matches the input.</param>
        /// <param name="stories">Optional parameter: Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="title">Optional parameter: Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Optional parameter: Return only issues in series whose title starts with the input.</param>
        /// <param name="upc">Optional parameter: Filter by UPC.</param>
        /// <return>Returns the ComicDataWrapper response from the API call</return>
        public ComicDataWrapper GetComicsCollectionByCreatorId(
                string creatorId,
                string characters = null,
                string collaborators = null,
                DateDescriptorEnum? dateDescriptor = null,
                string dateRange = null,
                string diamondCode = null,
                string digitalId = null,
                string ean = null,
                string events = null,
                string format = null,
                FormatTypeEnum? formatType = null,
                string hasDigitalIssue = null,
                string isbn = null,
                string issn = null,
                string issueNumber = null,
                string limit = null,
                string modifiedSince = null,
                string noVariants = null,
                string offset = null,
                string orderBy = null,
                string series = null,
                string sharedAppearances = null,
                string startYear = null,
                string stories = null,
                string title = null,
                string titleStartsWith = null,
                string upc = null)
        {
            Task<ComicDataWrapper> t = GetComicsCollectionByCreatorIdAsync(creatorId, characters, collaborators, dateDescriptor, dateRange, diamondCode, digitalId, ean, events, format, formatType, hasDigitalIssue, isbn, issn, issueNumber, limit, modifiedSince, noVariants, offset, orderBy, series, sharedAppearances, startYear, stories, title, titleStartsWith, upc);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Fetches lists of comics filtered by a creator id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <param name="characters">Optional parameter: Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="collaborators">Optional parameter: Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="dateDescriptor">Optional parameter: Return comics within a predefined date range.</param>
        /// <param name="dateRange">Optional parameter: Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="diamondCode">Optional parameter: Filter by diamond code.</param>
        /// <param name="digitalId">Optional parameter: Filter by digital comic id.</param>
        /// <param name="ean">Optional parameter: Filter by EAN.</param>
        /// <param name="events">Optional parameter: Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="format">Optional parameter: Filter by the issue format (e.g. comic, digital comic, hardcover). (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")</param>
        /// <param name="formatType">Optional parameter: Filter by the issue format type (comic or collection).</param>
        /// <param name="hasDigitalIssue">Optional parameter: Include only results which are available digitally. (Acceptable values are: "true")</param>
        /// <param name="isbn">Optional parameter: Filter by ISBN.</param>
        /// <param name="issn">Optional parameter: Filter by ISSN.</param>
        /// <param name="issueNumber">Optional parameter: Return only issues in series whose issue number matches the input.</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="modifiedSince">Optional parameter: Return only comics which have been modified since the specified date.</param>
        /// <param name="noVariants">Optional parameter: Exclude variant comics from the result set. (Acceptable values are: "true")</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "focDate", "onsaleDate", "title", "issueNumber", "modified", "-focDate", "-onsaleDate", "-title", "-issueNumber", "-modified")</param>
        /// <param name="series">Optional parameter: Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Optional parameter: Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="startYear">Optional parameter: Return only issues in series whose start year matches the input.</param>
        /// <param name="stories">Optional parameter: Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="title">Optional parameter: Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Optional parameter: Return only issues in series whose title starts with the input.</param>
        /// <param name="upc">Optional parameter: Filter by UPC.</param>
        /// <return>Returns the ComicDataWrapper response from the API call</return>
        public async Task<ComicDataWrapper> GetComicsCollectionByCreatorIdAsync(
                string creatorId,
                string characters = null,
                string collaborators = null,
                DateDescriptorEnum? dateDescriptor = null,
                string dateRange = null,
                string diamondCode = null,
                string digitalId = null,
                string ean = null,
                string events = null,
                string format = null,
                FormatTypeEnum? formatType = null,
                string hasDigitalIssue = null,
                string isbn = null,
                string issn = null,
                string issueNumber = null,
                string limit = null,
                string modifiedSince = null,
                string noVariants = null,
                string offset = null,
                string orderBy = null,
                string series = null,
                string sharedAppearances = null,
                string startYear = null,
                string stories = null,
                string title = null,
                string titleStartsWith = null,
                string upc = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/creators/{creatorId}/comics");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "creatorId", creatorId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "characters", characters },
                { "collaborators", collaborators },
                { "dateDescriptor", (dateDescriptor.HasValue) ? DateDescriptorEnumHelper.ToValue(dateDescriptor.Value) : null },
                { "dateRange", dateRange },
                { "diamondCode", diamondCode },
                { "digitalId", digitalId },
                { "ean", ean },
                { "events", events },
                { "format", format },
                { "formatType", (formatType.HasValue) ? FormatTypeEnumHelper.ToValue(formatType.Value) : null },
                { "hasDigitalIssue", hasDigitalIssue },
                { "isbn", isbn },
                { "issn", issn },
                { "issueNumber", issueNumber },
                { "limit", limit },
                { "modifiedSince", modifiedSince },
                { "noVariants", noVariants },
                { "offset", offset },
                { "orderBy", orderBy },
                { "series", series },
                { "sharedAppearances", sharedAppearances },
                { "startYear", startYear },
                { "stories", stories },
                { "title", title },
                { "titleStartsWith", titleStartsWith },
                { "upc", upc },
                { "apikey", Configuration.Apikey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("referer", Configuration.Referer);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"Limit greater than 100.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ComicDataWrapper>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Fetches lists of events filtered by a creator id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <param name="characters">Optional parameter: Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Optional parameter: Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="modifiedSince">Optional parameter: Return only events which have been modified since the specified date.</param>
        /// <param name="name">Optional parameter: Filter the event list by name.</param>
        /// <param name="nameStartsWith">Optional parameter: Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "startDate", "modified", "-name", "-startDate", "-modified")</param>
        /// <param name="series">Optional parameter: Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Optional parameter: Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <return>Returns the EventDataWrapper response from the API call</return>
        public EventDataWrapper GetCreatorEventsCollection(
                string creatorId,
                string characters = null,
                string comics = null,
                string limit = null,
                string modifiedSince = null,
                string name = null,
                string nameStartsWith = null,
                string offset = null,
                string orderBy = null,
                string series = null,
                string stories = null)
        {
            Task<EventDataWrapper> t = GetCreatorEventsCollectionAsync(creatorId, characters, comics, limit, modifiedSince, name, nameStartsWith, offset, orderBy, series, stories);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Fetches lists of events filtered by a creator id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <param name="characters">Optional parameter: Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Optional parameter: Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="modifiedSince">Optional parameter: Return only events which have been modified since the specified date.</param>
        /// <param name="name">Optional parameter: Filter the event list by name.</param>
        /// <param name="nameStartsWith">Optional parameter: Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "startDate", "modified", "-name", "-startDate", "-modified")</param>
        /// <param name="series">Optional parameter: Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Optional parameter: Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <return>Returns the EventDataWrapper response from the API call</return>
        public async Task<EventDataWrapper> GetCreatorEventsCollectionAsync(
                string creatorId,
                string characters = null,
                string comics = null,
                string limit = null,
                string modifiedSince = null,
                string name = null,
                string nameStartsWith = null,
                string offset = null,
                string orderBy = null,
                string series = null,
                string stories = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/creators/{creatorId}/events");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "creatorId", creatorId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "characters", characters },
                { "comics", comics },
                { "limit", limit },
                { "modifiedSince", modifiedSince },
                { "name", name },
                { "nameStartsWith", nameStartsWith },
                { "offset", offset },
                { "orderBy", orderBy },
                { "series", series },
                { "stories", stories },
                { "apikey", Configuration.Apikey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("referer", Configuration.Referer);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"Limit greater than 100.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<EventDataWrapper>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Fetches lists of series filtered by a creator id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <param name="characters">Optional parameter: Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Optional parameter: Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="contains">Optional parameter: Return only series containing one or more comics with the specified format. (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")</param>
        /// <param name="events">Optional parameter: Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="modifiedSince">Optional parameter: Return only series which have been modified since the specified date.</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "title", "modified", "startYear", "-title", "-modified", "-startYear")</param>
        /// <param name="seriesType">Optional parameter: Filter the series by publication frequency type. (Acceptable values are: "collection", "one shot", "limited", "ongoing")</param>
        /// <param name="startYear">Optional parameter: Return only series matching the specified start year.</param>
        /// <param name="stories">Optional parameter: Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="title">Optional parameter: Filter by series title.</param>
        /// <param name="titleStartsWith">Optional parameter: Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <return>Returns the SeriesDataWrapper response from the API call</return>
        public SeriesDataWrapper GetCreatorSeriesCollection(
                string creatorId,
                string characters = null,
                string comics = null,
                string contains = null,
                string events = null,
                string limit = null,
                string modifiedSince = null,
                string offset = null,
                string orderBy = null,
                string seriesType = null,
                string startYear = null,
                string stories = null,
                string title = null,
                string titleStartsWith = null)
        {
            Task<SeriesDataWrapper> t = GetCreatorSeriesCollectionAsync(creatorId, characters, comics, contains, events, limit, modifiedSince, offset, orderBy, seriesType, startYear, stories, title, titleStartsWith);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Fetches lists of series filtered by a creator id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <param name="characters">Optional parameter: Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Optional parameter: Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="contains">Optional parameter: Return only series containing one or more comics with the specified format. (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")</param>
        /// <param name="events">Optional parameter: Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="modifiedSince">Optional parameter: Return only series which have been modified since the specified date.</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "title", "modified", "startYear", "-title", "-modified", "-startYear")</param>
        /// <param name="seriesType">Optional parameter: Filter the series by publication frequency type. (Acceptable values are: "collection", "one shot", "limited", "ongoing")</param>
        /// <param name="startYear">Optional parameter: Return only series matching the specified start year.</param>
        /// <param name="stories">Optional parameter: Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="title">Optional parameter: Filter by series title.</param>
        /// <param name="titleStartsWith">Optional parameter: Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <return>Returns the SeriesDataWrapper response from the API call</return>
        public async Task<SeriesDataWrapper> GetCreatorSeriesCollectionAsync(
                string creatorId,
                string characters = null,
                string comics = null,
                string contains = null,
                string events = null,
                string limit = null,
                string modifiedSince = null,
                string offset = null,
                string orderBy = null,
                string seriesType = null,
                string startYear = null,
                string stories = null,
                string title = null,
                string titleStartsWith = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/creators/{creatorId}/series");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "creatorId", creatorId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "characters", characters },
                { "comics", comics },
                { "contains", contains },
                { "events", events },
                { "limit", limit },
                { "modifiedSince", modifiedSince },
                { "offset", offset },
                { "orderBy", orderBy },
                { "seriesType", seriesType },
                { "startYear", startYear },
                { "stories", stories },
                { "title", title },
                { "titleStartsWith", titleStartsWith },
                { "apikey", Configuration.Apikey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("referer", Configuration.Referer);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"Limit greater than 100.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<SeriesDataWrapper>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Fetches lists of stories filtered by a creator id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <param name="characters">Optional parameter: Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Optional parameter: Return only stories contained in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Optional parameter: Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="modifiedSince">Optional parameter: Return only stories which have been modified since the specified date.</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "id", "modified", "-id", "-modified")</param>
        /// <param name="series">Optional parameter: Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <return>Returns the StoryDataWrapper response from the API call</return>
        public StoryDataWrapper GetCreatorStoryCollection(
                string creatorId,
                string characters = null,
                string comics = null,
                string events = null,
                string limit = null,
                string modifiedSince = null,
                string offset = null,
                string orderBy = null,
                string series = null)
        {
            Task<StoryDataWrapper> t = GetCreatorStoryCollectionAsync(creatorId, characters, comics, events, limit, modifiedSince, offset, orderBy, series);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Fetches lists of stories filtered by a creator id.
        /// </summary>
        /// <param name="creatorId">Required parameter: A single creator id.</param>
        /// <param name="characters">Optional parameter: Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Optional parameter: Return only stories contained in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Optional parameter: Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="modifiedSince">Optional parameter: Return only stories which have been modified since the specified date.</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "id", "modified", "-id", "-modified")</param>
        /// <param name="series">Optional parameter: Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <return>Returns the StoryDataWrapper response from the API call</return>
        public async Task<StoryDataWrapper> GetCreatorStoryCollectionAsync(
                string creatorId,
                string characters = null,
                string comics = null,
                string events = null,
                string limit = null,
                string modifiedSince = null,
                string offset = null,
                string orderBy = null,
                string series = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/creators/{creatorId}/stories");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "creatorId", creatorId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "characters", characters },
                { "comics", comics },
                { "events", events },
                { "limit", limit },
                { "modifiedSince", modifiedSince },
                { "offset", offset },
                { "orderBy", orderBy },
                { "series", series },
                { "apikey", Configuration.Apikey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("referer", Configuration.Referer);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"Limit greater than 100.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<StoryDataWrapper>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Fetches lists of creators.
        /// </summary>
        /// <param name="comics">Optional parameter: Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Optional parameter: Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="firstName">Optional parameter: Filter by creator first name (e.g. Brian).</param>
        /// <param name="firstNameStartsWith">Optional parameter: Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="lastName">Optional parameter: Filter by creator last name (e.g. Bendis).</param>
        /// <param name="lastNameStartsWith">Optional parameter: Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="middleName">Optional parameter: Filter by creator middle name (e.g. Michael).</param>
        /// <param name="middleNameStartsWith">Optional parameter: Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="modifiedSince">Optional parameter: Return only creators which have been modified since the specified date.</param>
        /// <param name="nameStartsWith">Optional parameter: Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "lastName", "firstName", "middleName", "suffix", "modified", "-lastName", "-firstName", "-middleName", "-suffix", "-modified")</param>
        /// <param name="series">Optional parameter: Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Optional parameter: Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="suffix">Optional parameter: Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <return>Returns the CreatorDataWrapper response from the API call</return>
        public CreatorDataWrapper GetCreatorCollection(
                string comics = null,
                string events = null,
                string firstName = null,
                string firstNameStartsWith = null,
                string lastName = null,
                string lastNameStartsWith = null,
                string limit = null,
                string middleName = null,
                string middleNameStartsWith = null,
                string modifiedSince = null,
                string nameStartsWith = null,
                string offset = null,
                string orderBy = null,
                string series = null,
                string stories = null,
                string suffix = null)
        {
            Task<CreatorDataWrapper> t = GetCreatorCollectionAsync(comics, events, firstName, firstNameStartsWith, lastName, lastNameStartsWith, limit, middleName, middleNameStartsWith, modifiedSince, nameStartsWith, offset, orderBy, series, stories, suffix);
            Task.WaitAll(t);
            return t.Result;
        }

        /// <summary>
        /// Fetches lists of creators.
        /// </summary>
        /// <param name="comics">Optional parameter: Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Optional parameter: Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="firstName">Optional parameter: Filter by creator first name (e.g. Brian).</param>
        /// <param name="firstNameStartsWith">Optional parameter: Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="lastName">Optional parameter: Filter by creator last name (e.g. Bendis).</param>
        /// <param name="lastNameStartsWith">Optional parameter: Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="limit">Optional parameter: Limit the result set to the specified number of resources.</param>
        /// <param name="middleName">Optional parameter: Filter by creator middle name (e.g. Michael).</param>
        /// <param name="middleNameStartsWith">Optional parameter: Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="modifiedSince">Optional parameter: Return only creators which have been modified since the specified date.</param>
        /// <param name="nameStartsWith">Optional parameter: Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="offset">Optional parameter: Skip the specified number of resources in the result set.</param>
        /// <param name="orderBy">Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "lastName", "firstName", "middleName", "suffix", "modified", "-lastName", "-firstName", "-middleName", "-suffix", "-modified")</param>
        /// <param name="series">Optional parameter: Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Optional parameter: Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="suffix">Optional parameter: Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <return>Returns the CreatorDataWrapper response from the API call</return>
        public async Task<CreatorDataWrapper> GetCreatorCollectionAsync(
                string comics = null,
                string events = null,
                string firstName = null,
                string firstNameStartsWith = null,
                string lastName = null,
                string lastNameStartsWith = null,
                string limit = null,
                string middleName = null,
                string middleNameStartsWith = null,
                string modifiedSince = null,
                string nameStartsWith = null,
                string offset = null,
                string orderBy = null,
                string series = null,
                string stories = null,
                string suffix = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/creators");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "comics", comics },
                { "events", events },
                { "firstName", firstName },
                { "firstNameStartsWith", firstNameStartsWith },
                { "lastName", lastName },
                { "lastNameStartsWith", lastNameStartsWith },
                { "limit", limit },
                { "middleName", middleName },
                { "middleNameStartsWith", middleNameStartsWith },
                { "modifiedSince", modifiedSince },
                { "nameStartsWith", nameStartsWith },
                { "offset", offset },
                { "orderBy", orderBy },
                { "series", series },
                { "stories", stories },
                { "suffix", suffix },
                { "apikey", Configuration.Apikey }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };
            _headers.Add("referer", Configuration.Referer);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"Limit greater than 100.", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CreatorDataWrapper>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 